# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graph/models_gen.go
  package: graph

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph

# Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/jordanknott/project-citadel/api/pg"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model: github.com/jordanknott/project-citadel/api/graph.UUID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int

  UUID:
    model: github.com/jordanknott/project-citadel/api/graph.UUID
